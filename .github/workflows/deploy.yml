name: Kittygram Workflow
on:
  workflow_call:
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      SSH_KEY:
        required: true
      POSTGRES_DB:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      SECRET_KEY:
        required: true
    inputs:
      host:
        description: "IP адрес продакшен ВМ из Terraform"
        required: true
        type: string
      user:
        description: "Пользователь SSH для подключения из Terraform"
        required: true
        type: string
jobs:
    tests:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:13.10
                env:
                    POSTGRES_USER: kittygram_user
                    POSTGRES_PASSWORD: kittygram_password
                    POSTGRES_DB: kittygram
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        steps:
            - name: Check out code
              uses: actions/checkout@v3 

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: 3.9 

            - name: Install setuptools and wheel
              run: |
                python -m pip install --upgrade setuptools wheel pip

            - name: Install Cython
              run: |
                python -m pip install cython

            - name: Install system dependencies for building packages
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential libpq-dev python3-dev 

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8==6.0.0 flake8-isort==6.0.0
                pip install -r ./backend/requirements.txt --prefer-binary
            - name: Debugging installation process
              run: |
                python -m pip install -v -r ./backend/requirements.txt --prefer-binary  
            - name: Check for dependency issues
              run: |
                pip check
            # Чтобы запустить тесты, нужно установить зависимости    
            # Запускаем flake8
            - name: Test with flake8
              # Вызываем flake8 и указываем ему,
              # что нужно проверить файлы только в папке backend/
              run: |
                python -m flake8 backend/
            #    cd backend/
            #    python manage.py test 
            #В ключе run хранится команда, которая будет выполнена в терминале 
            #окружения на раннере
            - uses: actions/checkout@v3
            - name: Set up NodeJS
            # Это готовый воркфлоу для установки Node.js на раннер
              uses: actions/setup-node@v3
              with:
                # Это параметр воркфлоу, указывающий нужную версию Node.js
                node-version: 18
            - name: Install dependencies
              # Эта команда устанавливает зависимости для фронтенда
              run: |
                cd frontend/
                npm ci
            - name: Test frontend
              run: |
                cd frontend/
                npm run test
    Push_to_docker_hub:
        name: Push Docker image to DockerHub
        runs-on: ubuntu-latest
        needs: tests
        environment: production
        steps:           
            - name: Check out the repo
              uses: actions/checkout@v3

            - name: Login to Docker
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Set up Docker Buildx
            # Установка сборщика контейнеров Docker
              uses: docker/setup-buildx-action@v2

            - name: Push backend to DockerHub
              uses: docker/build-push-action@v4
              with:
                # Параметр context: ./backend/ указывает, что нужный Dockerfile 
                # находится в ./backend/
                context: ./backend/
                # Параметр push: true указывает, что образ нужно не только собрать,
                # но и отправить на Docker Hub
                push: true
                # В параметре tags задаётся название и тег для образа.
                # Для каждого пересобранного образа 
                # устанавливаем тег latest, чтобы потом
                tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest
            - name: Push frontend to DockerHub
              uses: docker/build-push-action@v4
              with:
                context: ./frontend/
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest
            - name: Push gateway to DockerHub
              uses: docker/build-push-action@v4
              with:
                context: ./nginx/
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest
    deploy:
        runs-on: ubuntu-latest
        needs: Push_to_docker_hub
        steps:
          - name: Checkout repo
            uses: actions/checkout@v3

          - name: Debug host and user
            run: |
              echo "Host: ${{ inputs.host }}"
              echo "User: ${{ inputs.user }}"

          # Копируем docker-compose.production.yml на продакшен-сервер:
          - name: Copy docker-compose.yml via ssh
            uses: appleboy/scp-action@master
          # Передаём параметры для action appleboy/scp-action:
            with:
              host: ${{ inputs.host }}
              username: ${{ inputs.user }}
              key: ${{ secrets.SSH_KEY }}
              source: "."
              target: "/home/user/kittygram/"
          
          - name: Сreate .env
            uses: appleboy/ssh-action@master
            with:
              host: ${{ inputs.host }}
              username: ${{ inputs.user }}
              key: ${{ secrets.SSH_KEY }}
              envs: POSTGRES_DB,POSTGRES_USER,POSTGRES_PASSWORD,SECRET_KEY
              script: |
                cd /home/user/kittygram/
                echo "POSTGRES_DB=$POSTGRES_DB" > .env
                echo "POSTGRES_USER=$POSTGRES_USER" >> .env
                echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
                echo "DB_HOST=postgres" >> .env
                echo "DB_PORT=5432" >> .env
                echo "SECRET_KEY=$SECRET_KEY" >> .env
                echo "DEBUG=False" >> .env
            env:
              POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
              POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
              SECRET_KEY: ${{ secrets.SECRET_KEY }}


          - name: Executing remote ssh commands to deploy
            uses: appleboy/ssh-action@master
            with:
              host: ${{ inputs.host }}
              username: ${{ inputs.user }}
              key: ${{ secrets.SSH_KEY }}
              # Параметр script передаёт в action appleboy/ssh-action команды,
              # которые нужно выполнить на сервере, 
              # с которым установлено соединение:
              script: |
                cd /home/user/kittygram/ 
                sudo docker compose -f docker-compose.yml pull
                sudo docker compose -f docker-compose.yml down
                sudo docker compose -f docker-compose.yml up -d
                sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
                sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
                sudo docker compose -f docker-compose.yml exec backend cp -r /app/collected_static/. /app/build/
    auto_tests:
        runs-on: ubuntu-latest
        needs: deploy
        steps:
          - name: Check out code
            uses: actions/checkout@v3

          - name: Generate tests.yml
            run: |
              echo "repo_owner: ArturDzhakishev" > tests.yml
              echo "kittygram_domain: http://${{ inputs.host }}:80" >> tests.yml
              echo "dockerhub_username: ${{ secrets.DOCKER_USERNAME }}" >> tests.yml

          - name: Set up Python
            uses: actions/setup-python@v4
            with:
                python-version: 3.9 
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install -r ./backend/requirements.txt --prefer-binary
          - name: Run autotests
            run: |
              pytest
    telegram_notify:
        runs-on: ubuntu-latest
        needs: auto_tests
        steps:
          - name: Send message
            uses: appleboy/telegram-action@master
            with:
              to: ${{ secrets.TELEGRAM_TO }}
              token: ${{ secrets.TELEGRAM_TOKEN }}
              message: Деплой успешно выполнен! 
