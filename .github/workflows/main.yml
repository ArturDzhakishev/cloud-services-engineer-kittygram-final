name: Kittygram Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  #Ключ on описывает триггер — событие, 
  #которое должно произойти, чтобы workflow начал выполняться.
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
    #список действий, которые должны выполниться 
    #после срабатывания триггера
    tests:
        #Разворачиваем окружение
        runs-on: ubuntu-latest
        #runs-on, определяет, в каком окружении будут запущены все команды 
        #этой задачи. Окружение создаёт на своём сервере GitHub Actions.
        services:
            postgres:
                #запускаем контейнер из образа
                image: postgres:13.10
                # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
                # ведь эта база будет работать только во время прогона тестов
                env:
                    POSTGRES_USER: kittygram_user
                    POSTGRES_PASSWORD: kittygram_password
                    POSTGRES_DB: kittygram
                ports:
                    - 5432:5432
                # Эта конструкция описывает проверку готовности сервиса postgres
                # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
                # В результате тесты опять решат, что базы нет, — и упадут
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        steps:
            #Каждый шаг — это отдельная команда.
            #Копируем код проекта
            - name: Check out code
              uses: actions/checkout@v3 # Берём готовое решение из библиотеки GitHub Actions
            #Устанавливаем Python с помощью action
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: 3.9 # В action setup-python@v4 передаём параметр — версию Python
            - name: Install setuptools and wheel
              run: |
                python -m pip install --upgrade setuptools wheel pip
            - name: Install Cython
              run: |
                python -m pip install cython
            - name: Install system dependencies for building packages
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential libpq-dev python3-dev 
            # Обновляем pip, устанавливаем flake8 (инструмент для проверки кода PEP 8) и flake8-isort (расширение проверяет правильность сортировки импортов в коде), 
            # устанавливаем зависимости проекта
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8==6.0.0 flake8-isort==6.0.0
                pip install -r ./backend/requirements.txt --prefer-binary
            - name: Debugging installation process
              run: |
                python -m pip install -v -r ./backend/requirements.txt --prefer-binary  
            - name: Check for dependency issues
              run: |
                pip check
            # Чтобы запустить тесты, нужно установить зависимости    
            # Запускаем flake8
            - name: Test with flake8
              # Вызываем flake8 и указываем ему,
              # что нужно проверить файлы только в папке backend/
              run: |
                python -m flake8 backend/
            #    cd backend/
            #    python manage.py test 
            #В ключе run хранится команда, которая будет выполнена в терминале 
            #окружения на раннере
            - uses: actions/checkout@v3
            - name: Set up NodeJS
            # Это готовый воркфлоу для установки Node.js на раннер
              uses: actions/setup-node@v3
              with:
                # Это параметр воркфлоу, указывающий нужную версию Node.js
                node-version: 18
            - name: Install dependencies
              # Эта команда устанавливает зависимости для фронтенда
              run: |
                cd frontend/
                npm ci
            - name: Test frontend
              run: |
                cd frontend/
                npm run test
    Push_to_docker_hub:
        name: Push Docker image to DockerHub
        runs-on: ubuntu-latest
        needs: tests
        steps:
            - name: Check out the repo
            # Получение исходного кода из репозитория
              uses: actions/checkout@v3
            - name: Set up Docker Buildx
            # Установка сборщика контейнеров Docker
              uses: docker/setup-buildx-action@v2
            - name: Login to Docker
            # Авторизация на Docker Hub
              uses: docker/login-action@v2
              # При помощи with передаём в action параметры username и password
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Push backend to DockerHub
              # Одновременный билд и пуш образа в Docker Hub
              uses: docker/build-push-action@v4
              with:
                # Параметр context: ./backend/ указывает, что нужный Dockerfile 
                # находится в ./backend/
                context: ./backend/
                # Параметр push: true указывает, что образ нужно не только собрать,
                # но и отправить на Docker Hub
                push: true
                # В параметре tags задаётся название и тег для образа.
                # Для каждого пересобранного образа 
                # устанавливаем тег latest, чтобы потом
                tags: arturdzh/kittygram_backend:latest
            - name: Push frontend to DockerHub
              uses: docker/build-push-action@v4
              with:
                context: ./frontend/
                push: true
                tags: arturdzh/kittygram_frontend:latest
            - name: Push gateway to DockerHub
              uses: docker/build-push-action@v4
              with:
                context: ./nginx/
                push: true
                tags: arturdzh/kittygram_gateway:latest
    deploy:
        runs-on: ubuntu-latest
        needs: Push_to_docker_hub
        steps:
          - name: Checkout repo
            uses: actions/checkout@v3
          # Копируем docker-compose.production.yml на продакшен-сервер:
          - name: Copy docker-compose.yml via ssh
            uses: appleboy/scp-action@master
          # Передаём параметры для action appleboy/scp-action:
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              key: ${{ secrets.SSH_KEY }}
              source: "."
              target: "/home/ubuntu/kittygram/"
          - name: Executing remote ssh commands to deploy
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              key: ${{ secrets.SSH_KEY }}
              # Параметр script передаёт в action appleboy/ssh-action команды,
              # которые нужно выполнить на сервере, 
              # с которым установлено соединение:
              script: |
                cd /home/ubuntu/kittygram/ 
                sudo docker compose -f docker-compose.yml pull
                sudo docker compose -f docker-compose.yml down
                sudo docker compose -f docker-compose.yml up -d
                sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
                sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
                sudo docker compose -f docker-compose.yml exec backend cp -r /app/collected_static/. /app/build/
    auto_tests:
        runs-on: ubuntu-latest
        needs: deploy
        steps:
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
                python-version: 3.9
          - name: Run autotests
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              key: ${{ secrets.SSH_KEY }}
              script: |
                cd /home/ubuntu/kittygram/
                pytest tests/