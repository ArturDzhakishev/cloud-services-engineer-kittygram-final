name: Kittygram Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  #Ключ on описывает триггер — событие, 
  #которое должно произойти, чтобы workflow начал выполняться.
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
    #список действий, которые должны выполниться 
    #после срабатывания триггера
    tests:
        #Разворачиваем окружение
        runs-on: ubuntu-latest
        #runs-on, определяет, в каком окружении будут запущены все команды 
        #этой задачи. Окружение создаёт на своём сервере GitHub Actions.
        services:
            postgres:
                #запускаем контейнер из образа
                image: postgres:13.10
                # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
                # ведь эта база будет работать только во время прогона тестов
                env:
                    POSTGRES_USER: kittygram_user
                    POSTGRES_PASSWORD: kittygram_password
                    POSTGRES_DB: kittygram
                ports:
                    - 5432:5432
                # Эта конструкция описывает проверку готовности сервиса postgres
                # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
                # В результате тесты опять решат, что базы нет, — и упадут
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        steps:
            #Каждый шаг — это отдельная команда.
            #Копируем код проекта
            - name: Check out code
              uses: actions/checkout@v3 # Берём готовое решение из библиотеки GitHub Actions
            #Устанавливаем Python с помощью action
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: 3.12 # В action setup-python@v4 передаём параметр — версию Python
            - name: Install system dependencies for building packages
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential libpq-dev python3-dev 
            # Обновляем pip, устанавливаем flake8 (инструмент для проверки кода PEP 8) и flake8-isort (расширение проверяет правильность сортировки импортов в коде), 
            # устанавливаем зависимости проекта
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8==6.0.0 flake8-isort==6.0.0
                pip install -r ./backend/requirements.txt --prefer-binary
            # Чтобы запустить тесты, нужно установить зависимости    
            # Запускаем flake8
            - name: Test with flake8 and django tests
              # Вызываем flake8 и указываем ему,
              # что нужно проверить файлы только в папке backend/
              run: |
                python -m flake8 backend/
                cd backend/
                python manage.py test 
            #В ключе run хранится команда, которая будет выполнена в терминале 
            #окружения на раннере
#workflow для frontend
    frontend_tests:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
            - name: Set up NodeJS
            # Это готовый воркфлоу для установки Node.js на раннер
              uses: actions/setup-node@v3
              with:
                # Это параметр воркфлоу, указывающий нужную версию Node.js
                node-version: 18
            - name: Install dependencies
              # Эта команда устанавливает зависимости для фронтенда
              run: |
                cd frontend/
                npm ci
            - name: Test frontend
              run: |
                cd frontend/
                npm run test
